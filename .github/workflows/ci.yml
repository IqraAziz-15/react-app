# name: CI
# on:
#   pull_request:
#     branches: [develop]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Use nodeJS
#         uses: actions/setup-node@v1
#         with:
#           node-version: "12.x"
#       - run: npm ci
#       - run: npm install --save-dev --save-exact prettier
#       - run: npm run format:check
#       - run: npm test -- --coverage
#         env:
#           CI: true


# name: CI
# on:
#   pull_request:
#     branches: [develop]
#   push:
#     branches: [develop]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Use nodeJS
#         uses: actions/setup-node@v1
#         with:
#           node-version: "12.x"
#       - run: npm ci
#       - run: npx prettier --check "**/*.js"
#       - run: npm test -- --coverage
#         env:
#           CI: true
#       - name: Build project
#         if: github.event_name == 'push'
#         run: npm run build
#       # - run: npm install --global surge
#       # - name: Deploy to Staging
#       #   if: github.event_name == 'push'
#       #   run: surge
#       #     OR
#       - name: Deploy to Staging
#         if: github.event_name == 'push'
#         run: npx surge --project ./build --domain pointless-throat.surge.sh #npx will install and run surge here
#         env:
#           SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
#           SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}




# name: CI
# on:
#   pull_request:
#     branches: [develop]
#   push:
#     branches: [develop]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Cache node modules
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm   # npm cache files are stored in `~/.npm` on Linux/macOS
#           key: ${{ runner.os }}-mynodekey-${{ hashFiles('**/package-lock.json') }} #this key will be used to retreive cache, mynodekey is the key which will have the cache, from which we have to retreive.
#           restore-keys: |
#             ${{ runner.os }}-mynodekey-
#       - name: Use nodeJS
#         uses: actions/setup-node@v1
#         with:
#           node-version: "12.x"
#       - run: npm ci
#       - run: npx prettier --check "**/*.js"
#       - run: npm test -- --coverage
#         env:
#           CI: true
#       - name: Build project
#         if: github.event_name == 'push'
#         run: npm run build
#       # - run: npm install --global surge
#       # - name: Deploy to Staging
#       #   if: github.event_name == 'push'
#       #   run: surge
#       #     OR
#       - name: Deploy to Staging
#         if: github.event_name == 'push'
#         run: npx surge --project ./build --domain pointless-throat.surge.sh #npx will install and run surge here
#         env:
#           SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
#           SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}



# name: CI
# on:
#   pull_request:
#     branches: [develop]
#   push:
#     branches: [develop]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Cache node modules
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm   # npm cache files are stored in `~/.npm` on Linux/macOS
#           key: ${{ runner.os }}-mynodekey-${{ hashFiles('**/package-lock.json') }} #this key will be used to retreive cache, mynodekey is the key which will have the cache, from which we have to retreive.
#           restore-keys: |
#             ${{ runner.os }}-mynodekey-
#       - name: Use nodeJS
#         uses: actions/setup-node@v1
#         with:
#           node-version: "12.x"
#       - run: npm ci
#       - run: npx prettier --check "**/*.js"
#       - run: npm test -- --coverage
#         env:
#           CI: true
#       - name: Upload test Coverage
#         uses: actions/upload-artifact@v1
#         with:
#           name: code-coverage
#           path: coverage
#       - name: Build project
#         if: github.event_name == 'push'
#         run: npm run build
#       - name: Upload Build Folder
#         if: github.event_name == 'push'
#         uses: actions/upload-artifact@v1
#         with:
#           name: build
#           path: build
#       # - run: npm install --global surge
#       # - name: Deploy to Staging
#       #   if: github.event_name == 'push'
#       #   run: surge
#       #     OR
#       - name: Deploy to Staging
#         if: github.event_name == 'push'
#         run: npx surge --project ./build --domain pointless-throat.surge.sh #npx will install and run surge here
#         env:
#           SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
#           SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}



name: CI
on:
  pull_request:
    branches: [develop, master]
  push:
    branches: [develop, master]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm   # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-mynodekey-${{ hashFiles('**/package-lock.json') }} #this key will be used to retreive cache, mynodekey is the key which will have the cache, from which we have to retreive.
          restore-keys: |
            ${{ runner.os }}-mynodekey-
      - name: Use nodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - run: npm ci
      - run: npx prettier --check "**/*.js"
      - run: npm test -- --coverage
        env:
          CI: true
      - name: Upload test Coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: coverage
      - name: Build project
        if: github.event_name == 'push'
        run: npm run build
      - name: Upload Build Folder
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
      # - run: npm install --global surge
      # - name: Deploy to Staging
      #   if: github.event_name == 'push'
      #   run: surge
      #     OR
      - name: ZIP Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      - name: Create a release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain pointless-throat.surge.sh #npx will install and run surge here
      - name: Deploy to production
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx surge --project ./build --domain female-afternoon.surge.sh #npx will install and run surge here
      - name: Create an Issue
        if: failure() && github.event_name == 'pull_request'
        run: |
          curl -X POST \
          https://api.github.com/repos/${{
          github.repository }}/issues \
          -H 'authorization: Bearer ${{
          secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          -d '
          { 
            "title": "Automated issue fo commit: ${{
            github.sha }}",
            "body": "This issue was automatically created by the 
            Github Action Workflow **${{ github.workflow
            }}**. \n\n The commit has was: _${{ github.sha 
            }}_.",
            "assignees": ["${{
            github.event.pull_request.user.login}}"]
          }
          '
